# Comments in GraphQL strings (such as this one) start with the hash (#) symbol.

scalar JSON

type User {
  id: ID!
  username: String!
}

type Tournament {
  id: ID!
  name: String!
}

type Team {
  id: ID!
  name: String!
  members: [User]
}

type UserNotPartOfAnyTeam {
  message: String!
}

union UserTeamResult = Team | UserNotPartOfAnyTeam

type LoginResult {
  user: User!
  token: String!
}

type Game {
  id: ID
  version: Int
  canceled: Boolean
  players: [Player]
  gameState: JSON!
}

type GamePatch {
  patch: JSON
  gameID: ID
  version: Int
}

type GameCanceled {
  gameID: ID
  version: Int
}

type PlayerConnection {
  playerID: ID
  connected: Boolean
}

union LiveGame = Game | GamePatch | GameCanceled | PlayerConnection

type Player {
  id: ID
  token: String
  connected: Boolean
}

type DebugArena {
  id: ID
  game: ID
}

type PlayerGames {
  playerID: ID
  games: [ID]
}

type NewPlayerGames {
  games: [ID]
}

# Note that there won't be any event for removed player's
# games as querying the games is enought to know their status.
union LivePlayerGames = PlayerGames | NewPlayerGames

type Subscription {
  game(gameID: ID!): LiveGame
  debugArena(userID: ID!, tournamentID: ID!): DebugArena
  playerGames(playerID: ID!): LivePlayerGames
}

type Query {
  tournament(tournamentID: ID): Tournament
  team(userID: ID!, tournamentID: ID!): UserTeamResult
  authenticatedUser: User
}

type Mutation {
  play(gameID: ID!, playerID: ID!, action: String!, data: JSON!): Boolean
  createNewDebugGame(tournamentID: ID!, userID: ID!): Boolean

  registerUser(username: String!, password: String!): LoginResult
  login(username: String!, password: String!): LoginResult
  logout: Boolean

  createTournament(name: String!): Tournament
}
