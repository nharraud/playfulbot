# Comments in GraphQL strings (such as this one) start with the hash (#) symbol.

scalar Date
scalar JSON

type User {
  id: ID!
  username: String!
  teams: [Team]
  tournamentInvitations: [TournamentInvitation!]
}

enum TournamentStatus {
  CREATED, STARTED, ENDED
}

enum TournamentRoleName {
  ADMIN
}

type Tournament {
  id: ID!
  name: String!
  status: TournamentStatus
  startDate: Date
  lastRoundDate: Date
  firstRoundDate: Date
  roundsNumber: Int
  minutesBetweenRounds: Int

  rounds(maxSize: Int = 5, before: Date, after: Date): [Round]

  myRole: TournamentRoleName

  invitationLinkID: ID
}

type TournamentInvitation {
  id: ID
  tournament: Tournament
  invitee: User
}

type Team {
  id: ID!
  name: String!
  members: [User]
  tournament: Tournament
}

type UserNotPartOfAnyTeam {
  message: String!
}

union UserTeamResult = Team | UserNotPartOfAnyTeam

type LoginResult {
  user: User!
  token: String!
}

type Game {
  id: ID
  version: Int
  canceled: Boolean
  players: [Player]
  initialState: JSON
  patches: JSON
}

type GamePatch {
  patch: JSON
  gameID: ID
  version: Int
}

type GameCanceled {
  gameID: ID
  version: Int
}

type PlayerConnection {
  playerID: ID
  connected: Boolean
}

union LiveGame = Game | GamePatch | GameCanceled | PlayerConnection

type Player {
  id: ID
  token: String
  connected: Boolean
}

union LivePlayer = Player | PlayerConnection

type DebugArena {
  id: ID
  game: ID
}

type PlayerGames {
  playerID: ID
  games: [ID]
}

type NewPlayerGames {
  games: [ID]
}
# Note that there won't be any event for removed player's
# games as querying the games is enought to know their status.
union LivePlayerGames = PlayerGames | NewPlayerGames

enum RoundStatus {
  CREATED, STARTED, ENDED
}

type Round {
  id: ID
  status: RoundStatus
  startDate: Date
  teamPoints: Int
  teamGames(teamID: ID): [GameSummary]
}

type GameSummary {
  id: ID
  losers: [Team]
  winners: [Team]
}

type Subscription {
  game(gameID: ID!): LiveGame
  debugArena(userID: ID!, tournamentID: ID!): DebugArena
  playerGames(playerID: ID!): LivePlayerGames
  teamPlayer(teamID: ID!): LivePlayer
}

type Query {
  tournament(tournamentID: ID): Tournament
  tournamentByInvitationLink(tournamentInvitationLinkID: ID!): Tournament
  round(roundID: ID): Round
  team(userID: ID!, tournamentID: ID!): UserTeamResult
  authenticatedUser: User
}

type Mutation {
  play(gameID: ID!, playerID: ID!, action: String!, data: JSON!): Boolean
  createNewDebugGame(tournamentID: ID!, userID: ID!): Boolean

  registerUser(username: String!, password: String!): LoginResult
  login(username: String!, password: String!): LoginResult
  logout: Boolean

  createTournament(
    name: String!,
    startDate: Date!,
    lastRoundDate: Date!,
    roundsNumber: Int!,
    minutesBetweenRounds: Int!,
  ): Tournament

  registerTournamentInvitationLink(tournamentInvitationLinkID: ID!): TournamentInvitation
}
